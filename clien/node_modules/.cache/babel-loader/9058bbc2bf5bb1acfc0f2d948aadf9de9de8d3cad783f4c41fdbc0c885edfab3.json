{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\pertcpm\\\\client\\\\src\\\\AppContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useReducer } from 'react';\n\n// Define your context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\n\n// Define your reducer function\nexport const AppReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TASK':\n      return {\n        ...state,\n        tasklist: [...state.tasklist, action.payload]\n      };\n    case 'DELETE_TASK':\n      return {\n        ...state,\n        tasklist: state.tasklist.filter(task => task.text !== action.payload.text)\n      };\n    case 'SET_TASKLIST':\n      state.tasklist = action.payload;\n      state.loading = false;\n      return {\n        ...state\n      };\n    default:\n      return state;\n  }\n};\n\n// Create your provider component\n_c = AppReducer;\nexport const AppProvider = props => {\n  _s();\n  const [state, dispatch] = useReducer(AppReducer, {\n    tasklist: [],\n    loading: true\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/task');\n        if (!response.ok) {\n          throw new Error('Failed to fetch data');\n        }\n        const data = await response.json();\n        dispatch({\n          type: 'SET_TASKLIST',\n          payload: data\n        });\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      state: state.tasklist,\n      dispatch,\n      state: state.loading\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(AppProvider, \"TmCdvUmritO4okgTT6wf73vvYiw=\");\n_c2 = AppProvider;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppReducer\");\n$RefreshReg$(_c2, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useReducer","jsxDEV","_jsxDEV","AppContext","AppReducer","state","action","type","tasklist","payload","filter","task","text","loading","_c","AppProvider","props","_s","dispatch","fetchData","response","fetch","ok","Error","data","json","error","console","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/xampp/htdocs/pertcpm/client/src/AppContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useReducer } from 'react';\r\n\r\n// Define your context\r\nexport const AppContext = createContext();\r\n\r\n// Define your reducer function\r\nexport const AppReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_TASK':\r\n            return {\r\n                ...state,\r\n                tasklist: [...state.tasklist, action.payload]\r\n            };\r\n        case 'DELETE_TASK':\r\n            return {\r\n                ...state,\r\n                tasklist: state.tasklist.filter(task => task.text !== action.payload.text)\r\n            };\r\n        case 'SET_TASKLIST':\r\n            \r\n                state.tasklist = action.payload;\r\n                state.loading = false;\r\n                return {\r\n                    ...state,\r\n                };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// Create your provider component\r\nexport const AppProvider = (props) => {\r\n    const [state, dispatch] = useReducer(AppReducer, { tasklist: [],loading:true });\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:5000/task');\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch data');\r\n                }\r\n                const data = await response.json();\r\n                dispatch({ type: 'SET_TASKLIST', payload: data });\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            }\r\n        };\r\n        \r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <AppContext.Provider value={{state:state.tasklist, dispatch, state:state.loading }}>\r\n            {props.children}\r\n        </AppContext.Provider>\r\n    );\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,UAAU,gBAAGN,aAAa,CAAC,CAAC;;AAEzC;AACA,OAAO,MAAMO,UAAU,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACzC,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,UAAU;MACX,OAAO;QACH,GAAGF,KAAK;QACRG,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAQ,EAAEF,MAAM,CAACG,OAAO;MAChD,CAAC;IACL,KAAK,aAAa;MACd,OAAO;QACH,GAAGJ,KAAK;QACRG,QAAQ,EAAEH,KAAK,CAACG,QAAQ,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,KAAKN,MAAM,CAACG,OAAO,CAACG,IAAI;MAC7E,CAAC;IACL,KAAK,cAAc;MAEXP,KAAK,CAACG,QAAQ,GAAGF,MAAM,CAACG,OAAO;MAC/BJ,KAAK,CAACQ,OAAO,GAAG,KAAK;MACrB,OAAO;QACH,GAAGR;MACP,CAAC;IACT;MACI,OAAOA,KAAK;EACpB;AACJ,CAAC;;AAED;AAAAS,EAAA,GAxBaV,UAAU;AAyBvB,OAAO,MAAMW,WAAW,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAClC,MAAM,CAACZ,KAAK,EAAEa,QAAQ,CAAC,GAAGlB,UAAU,CAACI,UAAU,EAAE;IAAEI,QAAQ,EAAE,EAAE;IAACK,OAAO,EAAC;EAAK,CAAC,CAAC;EAE/Ed,SAAS,CAAC,MAAM;IACZ,MAAMoB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,CAAC;QAC1D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;QAC3C;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCP,QAAQ,CAAC;UAAEX,IAAI,EAAE,cAAc;UAAEE,OAAO,EAAEe;QAAK,CAAC,CAAC;MACrD,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ,CAAC;IAEDP,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIjB,OAAA,CAACC,UAAU,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAACxB,KAAK,EAACA,KAAK,CAACG,QAAQ;MAAEU,QAAQ;MAAEb,KAAK,EAACA,KAAK,CAACQ;IAAQ,CAAE;IAAAiB,QAAA,EAC9Ed,KAAK,CAACc;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAE9B,CAAC;AAACjB,EAAA,CAzBWF,WAAW;AAAAoB,GAAA,GAAXpB,WAAW;AAAA,IAAAD,EAAA,EAAAqB,GAAA;AAAAC,YAAA,CAAAtB,EAAA;AAAAsB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}