{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\pertcpm\\\\client\\\\src\\\\AppContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer } from 'react';\n// 5. The reducer - this is used to update the state, based on the action\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TASK':\n      state.tasklist = state.tasklist.push(action.payload);\n      action.type = \"DONE\";\n      return {\n        ...state\n      };\n    case 'DELETE_TASK':\n      state.tasklist.map(task => {\n        if (task.text === action.payload.text) {} else {\n          state.tasklist.push(task);\n        }\n        return true;\n      });\n      action.type = \"DONE\";\n      return {\n        ...state\n      };\n    default:\n      return state;\n  }\n};\n\n// 1. Sets the initial state when the app loads\n_c = AppReducer;\nconst fetchData = async () => {\n  try {\n    const response = await fetch('http://localhost:5000/task'); // Replace with your API endpoint\n    if (!response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n    console.log(\"hello\");\n    let hi = await response.json();\n    return hi;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {}; // Return empty object as default data if fetch fails\n  }\n};\nconst initialState = fetchData();\n// 2. Creates the context this is the thing our components import and use to get the state\nexport const AppContext = /*#__PURE__*/createContext();\n// 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\nexport const AppProvider = props => {\n  _s();\n  // 4. Sets up the app state. takes a reducer, and an initial state\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  const {\n    tasklist\n  } = state;\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      tasklist: state.tasklist,\n      dispatch\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(AppProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c2 = AppProvider;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppReducer\");\n$RefreshReg$(_c2, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useReducer","jsxDEV","_jsxDEV","AppReducer","state","action","type","tasklist","push","payload","map","task","text","_c","fetchData","response","fetch","ok","Error","console","log","hi","json","error","initialState","AppContext","AppProvider","props","_s","dispatch","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/xampp/htdocs/pertcpm/client/src/AppContext.js"],"sourcesContent":["import React, { createContext, useReducer } from 'react';\r\n// 5. The reducer - this is used to update the state, based on the action\r\nexport const AppReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_TASK':\r\n            state.tasklist = state.tasklist.push(action.payload)\r\n            action.type = \"DONE\";\r\n            return {\r\n                ...state,\r\n            };\r\n        case 'DELETE_TASK':\r\n            state.tasklist.map((task)=>{\r\n                if(task.text === action.payload.text) {\r\n                } else {\r\n                state.tasklist.push(task);\r\n                }\r\n                return true;\r\n            })\r\n            action.type = \"DONE\";\r\n            return {\r\n                ...state,\r\n            };\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// 1. Sets the initial state when the app loads\r\n\r\nconst fetchData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/task'); // Replace with your API endpoint\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch data');\r\n      }\r\n      console.log(\"hello\");\r\n      let hi = await response.json();\r\n      return hi;\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      return {}; // Return empty object as default data if fetch fails\r\n    }\r\n  };\r\nconst initialState = fetchData();\r\n// 2. Creates the context this is the thing our components import and use to get the state\r\nexport const AppContext = createContext();\r\n// 3. Provider component - wraps the components we want to give access to the state\r\n// Accepts the children, which are the nested(wrapped) components\r\nexport const AppProvider = (props) => {\r\n    // 4. Sets up the app state. takes a reducer, and an initial state\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n    const { tasklist } = state;\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                tasklist : state.tasklist,\r\n                dispatch\r\n            }\r\n            }\r\n        >\r\n            {props.children}\r\n        </AppContext.Provider>\r\n    );\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACxD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,UAAU,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACzC,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,UAAU;MACXF,KAAK,CAACG,QAAQ,GAAGH,KAAK,CAACG,QAAQ,CAACC,IAAI,CAACH,MAAM,CAACI,OAAO,CAAC;MACpDJ,MAAM,CAACC,IAAI,GAAG,MAAM;MACpB,OAAO;QACH,GAAGF;MACP,CAAC;IACL,KAAK,aAAa;MACdA,KAAK,CAACG,QAAQ,CAACG,GAAG,CAAEC,IAAI,IAAG;QACvB,IAAGA,IAAI,CAACC,IAAI,KAAKP,MAAM,CAACI,OAAO,CAACG,IAAI,EAAE,CACtC,CAAC,MAAM;UACPR,KAAK,CAACG,QAAQ,CAACC,IAAI,CAACG,IAAI,CAAC;QACzB;QACA,OAAO,IAAI;MACf,CAAC,CAAC;MACFN,MAAM,CAACC,IAAI,GAAG,MAAM;MACpB,OAAO;QACH,GAAGF;MACP,CAAC;IAEL;MACI,OAAOA,KAAK;EACpB;AACJ,CAAC;;AAED;AAAAS,EAAA,GA1BaV,UAAU;AA4BvB,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;EAC1B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAC;IAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;IACAC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpB,IAAIC,EAAE,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAC9B,OAAOD,EAAE;EACX,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO,CAAC,CAAC,CAAC,CAAC;EACb;AACF,CAAC;AACH,MAAMC,YAAY,GAAGV,SAAS,CAAC,CAAC;AAChC;AACA,OAAO,MAAMW,UAAU,gBAAG1B,aAAa,CAAC,CAAC;AACzC;AACA;AACA,OAAO,MAAM2B,WAAW,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAClC;EACA,MAAM,CAACxB,KAAK,EAAEyB,QAAQ,CAAC,GAAG7B,UAAU,CAACG,UAAU,EAAEqB,YAAY,CAAC;EAC9D,MAAM;IAAEjB;EAAS,CAAC,GAAGH,KAAK;EAC1B,oBACIF,OAAA,CAACuB,UAAU,CAACK,QAAQ;IAChBC,KAAK,EAAE;MACHxB,QAAQ,EAAGH,KAAK,CAACG,QAAQ;MACzBsB;IACJ,CACC;IAAAG,QAAA,EAEAL,KAAK,CAACK;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAE9B,CAAC;AAACR,EAAA,CAfWF,WAAW;AAAAW,GAAA,GAAXX,WAAW;AAAA,IAAAb,EAAA,EAAAwB,GAAA;AAAAC,YAAA,CAAAzB,EAAA;AAAAyB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}